{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst KEY = \"b5ebc8e4\";\nexport default function useMovies(query) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const controller = new AbortController();\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        setError(\"\");\n        const response = await fetch(`https://www.omdbapi.com/?apikey=${KEY}&s=${query}`, {\n          signal: controller.signal\n        });\n        const data = await response.json();\n        setMovies(data.Search);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error);\n        setError(\"something went wrong\");\n        setMovies([]);\n      }\n    }\n    if (!query.length) {\n      setMovies([]);\n      setError(\"\");\n      return () => {\n        controller.abort();\n      };\n    }\n    // handleCloseMovie();\n    fetchData();\n  }, [query]);\n  return [movies, isLoading, error];\n}\n_s(useMovies, \"U+znDQTK7eje4cwlxt5gS2qHcHc=\");","map":{"version":3,"names":["useEffect","useState","KEY","useMovies","query","_s","movies","setMovies","isLoading","setIsLoading","error","setError","controller","AbortController","fetchData","response","fetch","signal","data","json","Search","console","log","length","abort"],"sources":["/Users/iro/Documents/GitHub/temp-projects/temp-usePopcorn/src/useMovies.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nconst KEY = \"b5ebc8e4\";\n\nexport default function useMovies(query) {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        setError(\"\");\n        const response = await fetch(\n          `https://www.omdbapi.com/?apikey=${KEY}&s=${query}`,\n          { signal: controller.signal }\n        );\n        const data = await response.json();\n        setMovies(data.Search);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error);\n        setError(\"something went wrong\");\n        setMovies([]);\n      }\n    }\n\n    if (!query.length) {\n      setMovies([]);\n      setError(\"\");\n      return () => {\n        controller.abort();\n      };\n    }\n    // handleCloseMovie();\n    fetchData();\n  }, [query]);\n  return [movies, isLoading, error];\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,MAAMC,GAAG,GAAG,UAAU;AAEtB,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAG,IAAIC,eAAe,EAAE;IAExC,eAAeC,SAASA,CAAA,EAAG;MACzB,IAAI;QACFL,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,EAAE,CAAC;QACZ,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CACzB,mCAAkCd,GAAI,MAAKE,KAAM,EAAC,EACnD;UAAEa,MAAM,EAAEL,UAAU,CAACK;QAAO,CAAC,CAC9B;QACD,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAClCZ,SAAS,CAACW,IAAI,CAACE,MAAM,CAAC;QACtBX,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdW,OAAO,CAACC,GAAG,CAACZ,KAAK,CAAC;QAClBC,QAAQ,CAAC,sBAAsB,CAAC;QAChCJ,SAAS,CAAC,EAAE,CAAC;MACf;IACF;IAEA,IAAI,CAACH,KAAK,CAACmB,MAAM,EAAE;MACjBhB,SAAS,CAAC,EAAE,CAAC;MACbI,QAAQ,CAAC,EAAE,CAAC;MACZ,OAAO,MAAM;QACXC,UAAU,CAACY,KAAK,EAAE;MACpB,CAAC;IACH;IACA;IACAV,SAAS,EAAE;EACb,CAAC,EAAE,CAACV,KAAK,CAAC,CAAC;EACX,OAAO,CAACE,MAAM,EAAEE,SAAS,EAAEE,KAAK,CAAC;AACnC;AAACL,EAAA,CArCuBF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}